#!/bin/bash

#
# This file is distributed under the MIT License. See LICENSE.md for details.
#

SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

INPUT=""
ARCH=""
OPTIMIZE=0
SKIP=0

set -e

while [[ $# > 0 ]]
do
    key="$1"
    case $key in
        -O0)
            OPTIMIZE="0"
            shift
            ;;
        -O1)
            OPTIMIZE="1"
            shift # past argument
            ;;
        -O2)
            OPTIMIZE="2"
            shift # past argument
            ;;
        -s)
            SKIP="1"
            shift # past argument
            ;;
        --)
            shift
            break
            ;;
        *)
            # unknown option
            if [ -z "$ARCH" ]; then
                ARCH="$key"
            elif [ -z "$INPUT" ]; then
                INPUT="$key"
            else
                break;
            fi
            shift
            ;;
    esac
done

# Output file names
LL="$INPUT.ll"
REVAMB_LOG="$LL.log"
LL_OPT="$INPUT.opt.ll"
CSV="$LL.li.csv"
OBJ="$LL.o"

# Required programs
export PATH="$SCRIPT_PATH:$PATH"
CC="${CC:-cc}"
LLC="llc"
OPT="opt"
REVAMB="revamb"
TOOPT="li-csv-to-ld-options"
SUPPORTC="$SCRIPT_PATH/../share/revamb/support.c"

if [ '!' -e "$SUPPORTC" ]; then
    SUPPORTC="$SCRIPT_PATH/support.c"
    if [ '!' -e "$SUPPORTC" ]; then
        echo "Can't find support.c"
        exit 1
    fi
fi

if [ "$SKIP" -eq 0 ]; then
    "$REVAMB" -g ll --debug jtcount,osrjts  --use-sections --architecture "$ARCH" "$INPUT" "$LL" "$@" |& tee "$REVAMB_LOG"
fi

OUTPUT="$INPUT.translated"
if [ "$OPTIMIZE" -eq 0 ]; then
    "$LLC" -O0 -filetype=obj "$LL" -o "$OBJ"
elif [ "$OPTIMIZE" -eq 1 ]; then
    "$LLC" -O2 -filetype=obj "$LL" -o "$OBJ" -regalloc=fast
    #OUTPUT="$INPUT.lopt2.translated"
elif [ "$OPTIMIZE" -eq 2 ]; then
    "$OPT" -O2 -S -o "$LL_OPT" "$LL"
    LL="$LL_OPT"
    "$LLC" -O2 -filetype=obj "$LL" -o "$OBJ" -regalloc=fast
    #OUTPUT="$INPUT.lopt2.translated"
fi

"$CC" $("$TOOPT" "$CSV") \
      "$OBJ" \
      "$SUPPORTC" \
      -DTARGET_"$ARCH" \
      -lz -lm -lrt -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -g \
      -o "$OUTPUT" \
      -fno-pie
